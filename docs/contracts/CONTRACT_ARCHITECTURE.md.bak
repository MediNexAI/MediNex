# MediNex AI Contract Architecture

This document outlines the architecture of the Solana blockchain smart contracts used in the MediNex AI platform.

## Overview

The MediNex AI smart contracts serve several critical purposes:

1. **Model Registration and Verification**: Record and verify AI model information
2. **Contribution Tracking**: Record and attribute contributions to AI models
3. **Revenue Distribution**: Manage token distributions based on contributions
4. **Medical Data Validation**: Ensure the integrity and provenance of medical data

## Contract Architecture

```
                      ┌─────────────────┐
                      │                 │
                      │  MediNexToken   │
                      │                 │
                      └────────┬────────┘
                               │
                               ▼
                    ┌─────────────────────┐
                    │                     │
                    │  ModelRegistry      │
                    │                     │
                    └───┬───────────┬─────┘
                        │           │
            ┌───────────┘           └───────────┐
            ▼                                   ▼
┌─────────────────────┐               ┌─────────────────────┐
│                     │               │                     │
│  ContributionTracker│               │  DataValidation     │
│                     │               │                     │
└──────────┬──────────┘               └─────────────────────┘
           │
           ▼
┌─────────────────────┐
│                     │
│  RevenueDistributor │
│                     │
└─────────────────────┘
```

## Smart Contracts

### 1. MediNexToken

**Purpose**: Implements the MDNX token functionality according to the SPL token standard.

**Key Functions**:
- Token minting and burning
- Token transfers
- Token balance management
- Token allowances

### 2. ModelRegistry

**Purpose**: Records AI model information and manages model versions.

**Key Functions**:
- Register new AI models
- Update model metadata
- Record model versions and improvements
- Link models to their contributors
- Verify model integrity through hashing

**Key Structures**:
```rust
pub struct Model {
    pub id: Pubkey,
    pub name: String,
    pub description: String,
    pub version: String,
    pub model_type: ModelType,
    pub hash: [u8; 32],  // SHA-256 hash of the model
    pub creator: Pubkey,
    pub created_at: i64,
    pub updated_at: i64,
}

pub enum ModelType {
    MedicalImaging,
    MedicalText,
    MedicalDiagnostic,
    MedicalGeneral,
}
```

### 3. ContributionTracker

**Purpose**: Records and verifies contributions made to AI models.

**Key Functions**:
- Register new contributions
- Record contribution types (code, data, validation, etc.)
- Link contributions to specific models
- Verify contribution authenticity
- Track contribution metrics

**Key Structures**:
```rust
pub struct Contribution {
    pub id: Pubkey,
    pub contributor: Pubkey,
    pub model_id: Pubkey,
    pub contribution_type: ContributionType,
    pub description: String,
    pub metadata: String,  // JSON metadata
    pub timestamp: i64,
    pub verification_status: VerificationStatus,
}

pub enum ContributionType {
    ModelCode,
    TrainingData,
    Validation,
    Testing,
    Documentation,
}

pub enum VerificationStatus {
    Pending,
    Verified,
    Rejected,
}
```

### 4. RevenueDistributor

**Purpose**: Manages token distributions based on contributions.

**Key Functions**:
- Calculate revenue shares based on contribution metrics
- Distribute tokens to contributors
- Record distribution history
- Manage vesting schedules
- Handle distribution disputes

**Key Structures**:
```rust
pub struct Distribution {
    pub id: Pubkey,
    pub model_id: Pubkey,
    pub total_amount: u64,
    pub distribution_date: i64,
    pub status: DistributionStatus,
}

pub enum DistributionStatus {
    Pending,
    InProgress,
    Completed,
    Failed,
}
```

### 5. DataValidation

**Purpose**: Ensures the integrity and provenance of medical data.

**Key Functions**:
- Record data source information
- Validate data integrity through hashing
- Track data usage across models
- Manage data access permissions
- Record compliance information

**Key Structures**:
```rust
pub struct DataRecord {
    pub id: Pubkey,
    pub data_type: DataType,
    pub hash: [u8; 32],  // SHA-256 hash of the data
    pub provider: Pubkey,
    pub metadata: String,  // JSON metadata
    pub timestamp: i64,
    pub usage_permissions: UsagePermission,
}

pub enum DataType {
    MedicalImage,
    MedicalText,
    MedicalStructured,
    MedicalTabular,
}

pub enum UsagePermission {
    Public,
    Research,
    Commercial,
    Restricted,
}
```

## Contract Interactions

1. **Model Registration Flow**:
   - Creator submits model information to ModelRegistry
   - ModelRegistry verifies creator's credentials
   - ModelRegistry assigns a unique ID and records the model information
   - ModelRegistry links the model to the creator as the initial contributor

2. **Contribution Recording Flow**:
   - Contributor submits contribution details to ContributionTracker
   - ContributionTracker verifies the contribution
   - ContributionTracker links the contribution to the specific model
   - ModelRegistry is updated with the contribution information

3. **Revenue Distribution Flow**:
   - RevenueDistributor calculates shares based on recorded contributions
   - RevenueDistributor creates a distribution proposal
   - Once approved, tokens are transferred to contributors
   - Distribution records are updated with completion status

4. **Data Validation Flow**:
   - Data provider submits data information to DataValidation
   - DataValidation creates a hash of the data for integrity checks
   - DataValidation records the data source and permissions
   - Models using the data reference the data record ID

## Security Considerations

- All contract functions implement proper access control
- Critical functions require multiple signatures
- Sensitive operations use time-locks
- Contract upgrades follow a governance process
- Regular security audits are performed

## Future Enhancements

1. Integration with decentralized identity systems
2. Implementation of quadratic funding mechanisms
3. Support for cross-chain interoperability
4. Enhanced governance mechanisms for community decision-making